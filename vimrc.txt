call pathogen#infect()
call pathogen#helptags()
filetype plugin on
"Omnicomplete
  set ofu=syntaxcomplete#Complete completeopt=longest,menuone matchtime=3
"Paste Toggle (toggle + C-S-v + toggle)
  set pastetoggle=<Insert>
"Stop beeping and screen flashing on errors
  set noerrorbells novisualbell t_vb=
"Make backspace work
  set bs=2
"Make underscore delimit words TODO breaks ctag finding
  " set iskeyword-=_
"Better CLI completion
  set wildmenu wildmode=list:longest,list:full
"Search
  set incsearch ignorecase smartcase hlsearch gdefault
"Status Line
  set ruler laststatus=2 "Always display the status line
"Folds
  set viewdir=~/.vimviews "Where cursor position and other info for each file is stored
  " set viewoptions=folds,options
"Undo even after closing a file
  set undolevels=1000 " How many undos
if version >= 703
  set undofile undodir=$HOME/.vimundo
  set undoreload=10000 " Number of lines to save for undo
endif
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" opens the edit command on the current directory
noremap <leader>c :edit <c-r>=expand("%:h")<cr>/

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

set cursorline " Highlight the line with the cursor
set hlsearch " Highlight matches
" Clear matches with leader space
nnoremap <leader><space> :nohlsearch<cr>

""----------- Go lint -----------------"
"set rtp+=/home/djohansen/gowork/src/github.com/golang/lint/misc/vim
"autocmd BufWritePost,FileWritePost *.go execute 'Lint' | cwindow
autocmd BufNewFile,BufRead *.pipeline   set syntax=groovy
autocmd BufNewFile,BufRead *.tw   set syntax=python

set autoread "Automatically reload if changes detected
" set autowriteall "Save when focus is lost
set bufhidden=hide
set autoindent nosmartindent
let g:matchparen_insert_timeout=10 "Give up matching paren after 10ms
" Time out on key codes but not mappings
set notimeout
set ttimeout
set ttimeoutlen=100
" Show trailing whitespace
set list
set list lcs=trail:·,tab:➝\ ,precedes:«,extends:»
set showbreak=↪\  " Character to precede line wraps
" Don't look at top lines for modeline
set nomodeline
set modelines=0
"Yanks go on clipboard instead
" if version >= 703
"   set clipboard& clipboard=unnamedplus
" else
"   set clipboard& clipboard=unnamed
" endif
" Enable folding by indentation
  set foldmethod=indent
  set foldlevelstart=10 " open most folds by default
  set foldnestmax=10      " 10 nested fold max
set fillchars=fold:\ ,diff:⣿
set dictionary-=/usr/share/dict/words "Dict for spellchecking
set expandtab "Tabs become spaces
"set formatoptions=crqlj "j=join comments works properly
set nojoinspaces "Use only 1 space after . when joining lines instead of 2
set shiftround "Round indentation to nearest indent interval
set hidden "Hides additional buffers
set nostartofline "Don't reset cursor to start of line when moving around
set lazyredraw "Doesn't bounce around during macros and functions
set noswapfile
" set number "Line Numbers
set number "Proper line number for current line
"if version >= 703
"  set relativenumber "Line numbers relative to the cursor's line for all lines but current line
"endif
set numberwidth=3
set scrolloff=3 "Minimum number of lines to keep below/above current line
set scrolljump=5 "Lines to scroll when cursor leaves screen
set shiftround "Fixes indents that aren't a multiple of shiftwidth automatically
set shiftwidth=4 "How much shift command should shift over by
"set spelllang=en
"set spellsuggest=9
set shortmess+=filmnrxoOtT "Shorter messages
syntax sync minlines=256 "Update syntax highlighting for more lines increased scrolling performance
set synmaxcol=256 "Don't syntax highlight long lines
" set nofoldenable "Disable folding by default
set mouse= "Disable mouse support
set tabstop=4 "Width of tab
set softtabstop=4 "Width of tab in insert mode
set tabpagemax=100 "Increase max # of tabs
set tildeop "Make tilde work with motions
"TODO don't need both */.python and .python styles, figure out which one is right
set wildignore+=*.pyc,*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git,.sass-cache,*.class,*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*/.git/*,*/.svn/*
set wildignore+=*/.pants.d/*,.pants.d,*/.python,.python
set nowrap "Turn off word-wrapping
set showcmd "Show commands as you are typing them
" ---------------
" Status Line
" ---------------
set statusline=%t    "tail of the filename
set statusline+=%m   "modified flag
set statusline+=%r   "read only flag
set statusline+=%=   "left/right separator
set statusline+=%c,  "cursor column
set statusline+=%l   "cursor line/total lines
set statusline+=\ %P "percent through file
"When editing a file, always jump to the last cursor position
autocmd BufReadPost *
      \ if line("'\"") > 1 && line ("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Clear highlighting when entering insert mode
autocmd InsertEnter * :setlocal nohlsearch
autocmd InsertLeave * :setlocal hlsearch

" Custom filetypes
au BufRead,BufNewFile BUILD.* set filetype=python
au BufRead,BufNewFile *.aurora set filetype=python
au BufRead,BufNewFile *.alert set filetype=mustache
au BufRead,BufNewFile *.script set filetype=sh
"****************************************
" Plugin Configuration
"****************************************
" ---------------
" Syntastic
" ---------------
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_cpp_compiler = 'clang++' " Use clang++ instead of g++
"let g:syntastic_python_checkers=['pep8']
" ---------------
" ctrlp.vim
" ---------------
let g:ctrlp_max_history = 200
let g:ctrlp_mruf_max = 200
let g:ctrlp_use_caching = 1
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cmd ='CtrlPMixed'

" For really large repos can touch .ctrlp in each project's root so ctrlp won't search all the way
" up to .git
let g:ctrlp_root_markers = ['.ctrlp']

" Seed the prompt with the current file
" let g:ctrlp_default_input = 1
" Scan unlimited files on startup
let g:ctrlp_max_files = 0
" Search only by filename as opposed to full path
let g:ctrlp_by_filename = 1
" Use silver searched for backend
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
" Scan dotfiles
let g:ctrlp_show_hidden = 1
" Open in new tab
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|public$|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }
" ---------------
" ---------------
let g:indentLine_color_term = 239

"****************************************
" Functions
"****************************************
" TODO I forget what this does
augroup BWCCreateDir
  au!
  autocmd BufWritePre * if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) | execute "silent! !mkdir -p ".shellescape(expand('%:h'),  1) | redraw! | endif
augroup END

" Close quickfix window if it's the only window left
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" Fix Trailing White Space
command! FixTrailingWhiteSpace :%s/\s\+$//e


" OR ELSE ring the match in red...
highlight WhiteOnRed guibg=red

" ---------------
" Folds
" ---------------
" Save and restore folds automatically

" TODO Causes issues, doesn't refresh new options maybe that better session
" plugin would be better?
" autocmd BufWinLeave *.* mkview
" autocmd BufWinEnter *.* silent loadview
if has("folding")
  set foldtext=MyFoldText()
  function! MyFoldText()
    " for now, just don't try if version isn't 7 or higher
    if v:version < 701
      return foldtext()
    endif
    " clear fold from fillchars to set it up the way we want later
    let &l:fillchars = substitute(&l:fillchars,',\?fold:.','','gi')
    let l:numwidth = (v:version < 701 ? 8 : &numberwidth)
    if &fdm=='diff'
      let l:linetext=''
      let l:foldtext='---------- '.(v:foldend-v:foldstart+1).' lines the same ----------'
      let l:align = winwidth(0)-&foldcolumn-(&nu ? Max(strlen(line('$'))+1, l:numwidth) : 0)
      let l:align = (l:align / 2) + (strlen(l:foldtext)/2)
      " note trailing space on next line
      setlocal fillchars+=fold:\
    elseif !exists('b:foldpat') || b:foldpat==0
      let l:foldtext = ' '.(v:foldend-v:foldstart).' lines folded'.v:folddashes.'|'
      let l:endofline = (&textwidth>0 ? &textwidth : 80)
      let l:linetext = strpart(getline(v:foldstart),0,l:endofline-strlen(l:foldtext))
      let l:align = l:endofline-strlen(l:linetext)
      setlocal fillchars+=fold:-
    elseif b:foldpat==1
      let l:align = winwidth(0)-&foldcolumn-(&nu ? Max(strlen(line('$'))+1, l:numwidth) : 0)
      let l:foldtext = ' '.v:folddashes
      let l:linetext = substitute(getline(v:foldstart),'\s\+$','','')
      let l:linetext .= ' ---'.(v:foldend-v:foldstart-1).' lines--- '
      let l:linetext .= substitute(getline(v:foldend),'^\s\+','','')
      let l:linetext = strpart(l:linetext,0,l:align-strlen(l:foldtext))
      let l:align -= strlen(l:linetext)
      setlocal fillchars+=fold:-
    endif
    return printf('%s%*s', l:linetext, l:align, l:foldtext)
  endfunction
endif

"Improve appearance of folded text
function! NeatFoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = '·'
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let length = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g'))
  return foldtextstart . repeat(foldchar, winwidth(0)-length) . foldtextend
endfunction
set foldtext=NeatFoldText()
syntax on
"set term=screen-256color
"set background=dark
" solarized options
"let g:solarized_visibility = "high"
"let g:solarized_contrast = "high"
"let g:solarized_termcolors = 256
set t_Co=256   " This is may or may not needed.

set background=dark
colorscheme PaperColor
"colorscheme molokai
"colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties
"colorscheme Tomorrow-Night-Bright
let NERDTreeIgnore = ['\.pyc$']
"highlight VertSplit ctermbg=NONE
"highlight VertSplit ctermfg=NONE
highlight LineNr ctermfg=blue
let g:neocomplete#enable_at_startup = 1
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
nmap <F8> :TagbarToggle<CR>
" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>
" Clears trailing whitespace
function! ClearTrailingWhitespace()
    if &modifiable
        let oldView = winsaveview()
        %s/[ \t\r]\+$//e
        call winrestview(oldView)
    endif
endfunction
command! -nargs=* ClearTrailingWhitespace call ClearTrailingWhitespace()
" ----------- Vim Airline --------------
let g:airline#extensions#tabline#enabled = 1
